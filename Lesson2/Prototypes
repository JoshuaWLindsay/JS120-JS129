
// function assignProperty(object, property, value) {
//   if (object === null) {
//     return;
//   } else if (object.hasOwnProperty(property)) {
//     object[property] = value;
//   } else {
//     assignProperty(Object.getPrototypeOf(object), property, value);
//   }
// }

// let fooA = { bar: 1 };
// let fooB = Object.create(fooA);
// let fooC = Object.create(fooB);

// assignProperty(fooC, "bar", 2);
// console.log(fooA.bar); // 2
// console.log(fooC.bar); // 2

// assignProperty(fooC, "qux", 3);
// console.log(fooA.qux); // undefined
// console.log(fooC.qux); // undefined
// console.log(fooA.hasOwnProperty("qux")); // false
// console.log(fooC.hasOwnProperty("qux")); // false


// NOTE: Run this code from a file; don't use the REPL

// bar();
// function bar() {
//   console.log("this is bar");
// }

// foo();
// const foo = function() {
//   console.log("this is foo");
// };

// console.log(global.isNaN);      // [Function: isNaN]
// console.log(global.Infinity);   // Infinity

// let obj = {
//   a: 2,
//   b: 3,
// };

// function foo() {
//   return this.a + this.b;
// }

// let bar = foo.bind(obj);

// console.log(foo());
// console.log(bar());

// let positivity = {
//   message: 'JavaScript makes sense!',
// };

// let negativity = {
//   message: 'JavaScript makes no sense!',
// };

// function foo() {
//   console.log(this.message);
// }

// let bar = foo.bind(positivity);

// negativity.logMessage = bar;
// negativity.logMessage();

// let obj = {
//   a: 'Amazebulous!',
// };
// let otherObj = {
//   a: "That's not a real word!",
// };

// function foo() {
//   console.log(this.a);
// }

// let bar = foo.bind(obj);

// bar.call(otherObj);

// let obj = {
//   a: 5,

//   foo: () => {
//     console.log(this.a);
//   },
// };

// obj.foo(); // => undefined

// let obj = {
//   a: 'hello',
//   b: 'world',
//   foo: function() {
//     let bar = () => {
//       console.log(this.a + ' ' + this.b);
//     }

//     // some code
//     bar();

//     // some more code
//     bar();

//     // still more code
//   }
// };

// obj.foo();
// // => hello world
// // => hello world

// let turk = {
//   firstName: 'Christopher',
//   lastName: 'Turk',
//   occupation: 'Surgeon',

//   getDescription() {
//     return this.firstName + ' ' + this.lastName + ' is a '
//                                 + this.occupation + '.';
//   }
// };

// let getTurkDescription = turk.getDescription.bind(turk);

// function logReturnVal(func) {
//   let returnVal = func();
//   console.log(returnVal);
// }

// logReturnVal(getTurkDescription);

// const TESgames = {
//   titles: ['Arena', 'Daggerfall', 'Morrowind', 'Oblivion', 'Skyrim'],
//   seriesTitle: 'The Elder Scrolls',
//   listGames: function() {
//     // let self = this;
//     this.titles.forEach(function(title) {
//       console.log(this.seriesTitle + ': ' + title);
//     }, this);
//   }
// };

// TESgames.listGames();

// const TESgames = {
//   titles: ['Arena', 'Daggerfall', 'Morrowind', 'Oblivion', 'Skyrim'],
//   seriesTitle: 'The Elder Scrolls',
//   listGames: function() {
//     this.titles.forEach(title => {
//       console.log(this.seriesTitle + ': ' + title);
//     });
//   }
// };

// TESgames.listGames();

// let foo = {
//   a: 0,
//   incrementA: function() {
//     let increment = () => {
//       this.a += 1;
//     }

//     increment();
//   }
// };

// foo.incrementA();
// foo.incrementA();
// foo.incrementA();
// console.log(foo.a);

// let foo = {
//   bar: 42,
//   qux() {
//     console.log("Pudding");
//   },
// };

// let baz = Object.create(foo);
// console.log(baz);
// baz.qux()

// function sum(number1, number2) {
//   return number1 + number2;
// }

// const sum = function(number1, number2) {
//   return number1 + number2;
// };

// let sum = (number1, number2) => {
//   number1 + number2;
// };

// const sum = (number1, number2) => number1 + number2;

// let sum = (number1, number2) => {
//   return number1 + number2;
// };

// console.log(sum(1, 2));

// (function sum(number1, number2) {
//   return number1 + number2;
// });

// console.log(sum(3, 4));

// console.log(sum(3, 4));

// const sum = (number1, number2) => number1 + number2;

// console.log(sum(3, 4));

// const sum = function(number1, number2) {
//   let total = number1 + number2;
//   return total;
// };

// console.log(sum(3, 4));

// function sum(number1, number2) {
//   return number1 + number2;
// }

// const OPERATIONS = {
//   '+': (num1, num2) => num1 + num2,
//   '-': (num1, num2) => num1 - num2,
//   '*': (num1, num2) => num1 * num2,
//   '/': (num1, num2) => num1 / num2,
// };

// let getOperation = operation => OPERATIONS[operation];

// let compute = function(operation, num1, num2) {
//   return operation(num1, num2);
// };

// console.log(compute(getOperation('+'), 5, 9) === 14);

// global.foo = 5;
// if (isFinite(foo)) {
//   let bar = 3;
//   xyz = 5;
//   console.log(bar);
// }

// console.log(global.log === log);

// function foo() {
//   return this;
// }

// console.log(foo());

// let obj = {
//   foo() {
//     return this;
//   },
// };

// console.log(obj.foo());

// let obj = {
//   foo() {
//     return this;
//   },
// };

// let foo = obj.foo;
// console.log(foo());

// function bar() {
//   console.log('good morning');
// }

// global.inner = {
//   bar() {
//     console.log('good afternoon');
//   },
// };

// let obj = {
//   inner: {
//     bar() {
//       console.log('good night');
//     },

//     foo() {
//       bar();
//     },
//   },

//   bar() {
//     console.log('wake up');
//   },

//   foo() {
//     this.inner.bar();
//     inner.bar();
//     bar();
//   }
// };

// console.log(obj.foo());

// function bar() {
//   console.log('good morning');
// }

// global.inner = {
//   bar() {
//     console.log('good afternoon');
//   },
// };

// let obj = {
//   inner: {
//     bar() {
//       console.log('good night');
//     },

//     foo() {
//       bar();
//     },
//   },

//   bar() {
//     console.log('wake up');
//   },

//   foo() {
//     this.inner.bar();
//     inner.bar();
//     bar();
//   }
// };

// let foo = function() {
//   console.log('go to sleep');
// }

// function go(foo) {
//   foo();
// }

// console.log(go(obj.foo));

// let cat = {
//   name: 'Pudding',
//   colors: 'black and white',
//   identify() {
//     let report = function() {
//       console.log(`${this.name} is a ${this.colors} cat.`);
//     };
//     report();
//   },
// };

// cat.identify();
// // Expected output: Pudding is a black and white cat.

// let logResult = function(func) {
//   let result = func();
//   console.log(result);
//   return result;
// };

// let foo = function() {
//   let sue = {
//     name: 'Sue Perkins',
//     age: 37,
//     myAge() {
//       return `${this.name} is ${this.age} years old.`;
//     },
//   };
//   logResult(sue.myAge);
// };

// foo();
// // Expected output: Sue Perkins is 37 years old.

// let cats = {
//   names: [ 'Butterscotch', 'Pudding', 'Fluffy' ],
//   foo() {
//     [1, 2, 3].forEach(function(number) {
//       console.log(`${number}: ${this.names[number - 1]}`);
//     });
//   },
// };

// cats.foo();
// // Expected output:
// // 1: Butterscotch
// // 2: Pudding
// // 3: Fluffy

// function makeObj() {
//   let obj = {};
//   obj.propA = 10;
//   obj.propB = 20;
//   return obj;
// }

// function makeObj() {
//   return {
//     propA: 10,
//     propB: 20,
//   };
// }

// let invoice = {
//   phone: 3000,
//   internet: 6500
// };

// let payment = {
//   phone: 1300,
//   internet: 5500
// };

// let invoiceTotal = invoice.phone + invoice.internet;
// let paymentTotal = payment.phone + payment.internet;
// let remainingDue = invoiceTotal - paymentTotal;

// console.log(paymentTotal);         // => 6800
// console.log(remainingDue);         // => 2700

// function createInvoice(services = {}) {
//   let phoneCharge = services.phone;
//   if (phoneCharge === undefined) {
//     phoneCharge = 3000;
//   }

//   let internetCharge = services.internet;
//   if (internetCharge === undefined) {
//     internetCharge = 5500;
//   }

//   return {
//     phone: phoneCharge,
//     internet: internetCharge,
//     payments: [],

//     addPayment: function(payment) {
//       this.payments.push(payment);
//     },

//     addPayments: function(payments) {
//       payments.forEach(this.addPayment, this);
//     },

//     total: function() {
//       return this.phone + this.internet;
//     },

//     paymentTotal: function() {
//       return this.payments.reduce((sum, payment) => sum + payment.total(), 0);
//     },

//     amountDue: function() {
//       return this.total() - this.paymentTotal();
//     },
//   };
// }

// let invoice = createInvoice({
//   phone: 1200,
//   internet: 4000,
// });

// let payment1 = createPayment({ amount: 2000 });
// let payment2 = createPayment({
//   phone: 1000,
//   internet: 1200
// });

// let payment3 = createPayment({ phone: 1000 });

// invoice.addPayment(payment1);
// invoice.addPayments([payment2, payment3]);
// console.log(invoice.payments);
// console.log(invoice.amountDue());       // this should return 0

// function invoiceTotal(invoices) {
//   let total = 0;

//   for (let index = 0; index < invoices.length; index += 1) {
//     total += invoices[index].total();
//   }

//   return total;
// }

// let invoices = [];
// invoices.push(createInvoice());
// invoices.push(createInvoice({ internet: 6500 }));
// invoices.push(createInvoice({ phone: 2000 }));
// invoices.push(createInvoice({
//   phone: 1000,
//   internet: 4500,
// }));

// console.log(invoiceTotal(invoices)); // 31000

// function createPayment(services = {}) {
//   let internetPayment = services.internet;
//   if (!services.internet) {
//     internetPayment = 0;
//   };

//   let phonePayment = services.phone;
//   if (!services.phone) {
//     phonePayment = 0;
//   };

//   let amountPayment = services.amount;
//   if (!services.amount) {
//     amountPayment = 0;
//   };

//   return {
//     internet: internetPayment,
//     phone: phonePayment,
//     amount: amountPayment,

//     total: function() {
//       if (this.amount === 0) {
//         return this.phone + this.internet;
//       } else {
//         return this.amount;
//       }
//     }
//   };

// }

// function createPayment(services = {}) {
//   return payment = {
//     phone: services.phone || 0,
//     internet: services.internet || 0,
//     amount: services.amount,
//     total: function() {
//       return this.amount || (this.phone + this.internet);
//     }
//   };
// }

// function paymentTotal(payments) {
//   return payments.reduce((sum, payment)  => sum + payment.total(), 0);
// }

// let payments = [];
// payments.push(createPayment());
// payments.push(createPayment({
//   internet: 6500,
// }));

// payments.push(createPayment({
//   phone: 2000,
// }));

// payments.push(createPayment({
//   phone: 1000,
//   internet: 4500,
// }));

// payments.push(createPayment({
//   amount: 10000,
// }));

// console.log(paymentTotal(payments));      // => 24000

// function Lizard() {
//   this.scamper = function() {
//     console.log("I'm scampering!");
//   };
// }

// let lizzy = new Lizard();
// console.log(lizzy);
// lizzy.scamper(); // ?

// function Rectangle(width, height) {
//   this.width = width;
//   this.height = height;
// }

// Rectangle.prototype = {
//   area: function() {
//     return this.width * this.height;
//   },
//   perimeter: function() {
//     return 2 * (this.width + this.height);
//   },
// };

// let rect1 = new Rectangle(2, 3);

// console.log(rect1.area());
// console.log(rect1.perimeter());

// function Circle(radius) {
//   this.radius = radius;
// }

// Circle.prototype.area = function() {
//     return Math.PI * this.radius * this.radius;
// }

// let a = new Circle(3);
// let b = new Circle(4);

// console.log(a.area().toFixed(2)); // => 28.27
// console.log(b.area().toFixed(2)); // => 50.27
// console.log(a.hasOwnProperty('area')); // => false

// function Ninja() {
//   this.swung = true;
// }

// let ninja = new Ninja();

// Ninja.prototype.swingSword = function() {
//   return this.swung;
// };

// console.log(ninja.swingSword());

// function Ninja() {
//   this.swung = true;
// }

// let ninja = new Ninja();

// Ninja.prototype = {
//   swingSword: function() {
//     return this.swung;
//   },
// };

// console.log(ninja.swingSword());

// function Ninja() {
//   this.swung = false;
// }

// Ninja.prototype.swing = function() {
//   this.swung = true;
//   return this;
// }

// // Add a swing method to the Ninja prototype which
// // modifies `swung` and returns the calling object

// let ninjaA = new Ninja();
// let ninjaB = new Ninja();

// console.log(ninjaA.swing().swung);      // logs `true`
// console.log(ninjaB.swing().swung);      // logs `true`

// let ninjaA;

// {
//   const Ninja = function() {
//     this.swung = false;
//   };

//   ninjaA = new Ninja();
// }

// let ninjaB = new ninjaA.constructor();
// // create a `ninjaB` object here; don't change anything else

// console.log(ninjaA.constructor === ninjaB.constructor) // => true

// function User(first, last) {
//   if (!(this instanceof User)) {
//     return new User(first, last);
//   }
//   this.name = first + ' ' + last;
// }

// let name = 'Jane Doe';
// let user1 = new User('John', 'Doe');
// let user2 = User('John', 'Doe');

// console.log(name);         // => Jane Doe
// console.log(user1.name);   // => John Doe
// console.log(user2.name);   // => John Doe

// function createPet(animal, name) {
//   return {
//     animal,
//     name,

//     sleep() {
//       console.log(`I am sleeping`);
//     },

//     wake() {
//       console.log(`I am awake`);
//     },
//   };
// }

// let pudding = createPet("Cat", "Pudding");
// console.log(`I am a ${pudding.animal}. My name is ${pudding.name}.`);
// pudding.sleep(); // I am sleeping
// pudding.wake();  // I am awake

// let neptune = createPet("Fish", "Neptune");
// console.log(`I am a ${neptune.animal}. My name is ${neptune.name}.`);
// neptune.sleep(); // I am sleeping
// neptune.wake();  // I am awake

// const PetPrototype = {
//   init(animal, name) {
//     this.animal = animal;
//     this.name = name;
//     return this;
//   },

//   sleep() {
//     console.log(`I am sleeping`);
//   },

//   wake() {
//     console.log(`I am awake`);
//   },
// }

// let pudding = Object.create(PetPrototype).init("Cat", "Pudding");
// console.log(`I am a ${pudding.animal}. My name is ${pudding.name}.`);
// pudding.sleep(); // I am sleeping
// pudding.wake();  // I am awake

// let neptune = Object.create(PetPrototype).init("Fish", "Neptune");
// console.log(`I am a ${neptune.animal}. My name is ${neptune.name}.`);
// neptune.sleep(); // I am sleeping
// neptune.wake();  // I am awake

// function Greeting() {}

// Greeting.prototype.greet = function(message) {
//   console.log(message);
// };

// function Hello() {}

// Hello.prototype = Object.create(Greeting.prototype);

// Hello.prototype.hi = function() {
//   this.greet('Hello!');
// };

// function Goodbye() {}

// Goodbye.prototype = Object.create(Greeting.prototype);

// Goodbye.prototype.bye = function() {
//   this.greet("Goodbye");
// };

// let hello = new Hello();
// hello.hi();
// // hello.bye();
// hello.greet();
// hello.greet('Goodbye');
// // Hello.hi();

// class Greeting {
//   greet(string) {
//     console.log(string);
//   }
// }

// let greeting = new Greeting();

// greeting.greet('Greetings');

// class Hello extends Greeting {
//   hi() {
//     this.greet('Hello');
//   }
// }

// let hello = new Hello();

// hello.hi();
// class Goodbye extends Greeting {
//   bye() {
//     this.greet('Goodbye');
//   }
// }

// let goodbye = new Goodbye();

// goodbye.bye();
